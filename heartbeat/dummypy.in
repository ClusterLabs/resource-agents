#!@PYTHON@ -tt
# - *- coding: utf- 8 - *-
#
#
#	Dummy Python OCF RA. Does nothing except track its own state.
#	Use it only as a testing tool or example for how to write
#	a resource agent in python.
#
# Copyright (c) 2020 SUSE LINUX AG, Pablo Bravo
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################

import atexit
import logging
import os
import sys
import time

OCF_FUNCTIONS_DIR = os.environ.get("OCF_FUNCTIONS_DIR", "%s/lib/heartbeat" % os.environ.get("OCF_ROOT"))
sys.path.append(OCF_FUNCTIONS_DIR)

import ocf

LONG_DESC='''This is a Dummy Resource Agent. It does absolutely nothing except 
keep track of whether its running or not.
Its purpose in life is for testing and to serve as a template for RA writers.

NB: Please pay attention to the timeouts specified in the actions
section below. They should be meaningful for the kind of resource
the agent manages. They should be the minimum advised timeouts,
but they shouldn't/cannot cover _all_ possible resource
instances. So, try to be neither overly generous nor too stingy,
but moderate. The minimum timeouts should never be below 10 seconds.'''

SHORT_DESC='Example stateless resource agent'


def dummy_start(state, fake):
    rc = dummy_monitor(state, fake)
    if rc == ocf.OCF_SUCCESS:
	    return ocf.OCF_SUCCESS

    with open(state, 'w'):
        os.utime(state, None)

def dummy_stop(state, fake):
    rc = dummy_monitor(state, fake)
    if rc == ocf.OCF_SUCCESS:
        os.remove(state)

    return ocf.OCF_SUCCESS

def dummy_monitor(state, fake):
    try:
        if os.path.isfile(state):
            return ocf.OCF_SUCCESS

        if (not ocf.is_probe()) and (ocf.OCF_ACTION == "monitor"):
	        ocf.ocf_exit_reason("No process state file found")
        
        return ocf.OCF_NOT_RUNNING
    except:
        return ocf.OCF_ERR_GENERIC

def dummy_validate(state, fake):
    state_dir = os.path.dirname(state)
    file_test = f'{state_dir if state_dir != "" else "."}/$$'

    try:
        with open(file_test, 'w'):
            os.utime(file_test, None)
    except:
        ocf.ocf_exit_reason(f'State file "{state}" is not writable')
        return ocf.OCF_ERR_ARGS

    os.remove(file_test)
    return ocf.OCF_SUCCESS

def dummy_migrate_to(state, fake):
    ocf.logger.info(f'Migrating {ocf.OCF_RESOURCE_INSTANCE} to {ocf.get_parameter("CRM_meta_migrate_target")}.')
    dummy_stop(state, fake)

def dummy_migrate_from(state, fake):
    ocf.logger.info(f'Migrating {ocf.OCF_RESOURCE_INSTANCE} from {ocf.get_parameter("CRM_meta_migrate_source")}.')
    dummy_start(state, fake)

def dummy_reload(state, fake):
    ocf.logger.info(f'Reloading {ocf.OCF_RESOURCE_INSTANCE} ...')

def dummy_validate_all(state, fake):
    dummy_validate(state, fake)

def main():
    dummy_agent = ocf.Agent('dummy', SHORT_DESC, LONG_DESC)

    dummy_agent.add_parameter(
        name="state",
        shortdesc="State file",
        longdesc="Location to store the resource state in.",
        content_type="string",
        unique=True,
        default=ocf.get_parameter("state_default")
    )

    dummy_agent.add_parameter(
        name="fake",
        shortdesc="Fake attribute that can be changed to cause a reload",
        longdesc="Fake attribute that can be changed to cause a reload",
        content_type="string",
        unique=False,
        default=ocf.get_parameter("fake_default")
    )

    dummy_agent.add_action(name="start", timeout=20, handler=dummy_start)
    dummy_agent.add_action(name="stop", timeout=20, handler=dummy_stop)
    dummy_agent.add_action(name="monitor", timeout=20, handler=dummy_monitor, interval=10, depth=0)
    dummy_agent.add_action(name="reload", timeout=20, handler=dummy_reload)
    dummy_agent.add_action(name="migrate_to", timeout=20, handler=dummy_migrate_to)
    dummy_agent.add_action(name="migrate_from", timeout=20, handler=dummy_migrate_from)
    dummy_agent.add_action(name="validate-all", timeout=20, handler=dummy_validate_all)

    dummy_agent.run()

if __name__ == "__main__":
    main()
