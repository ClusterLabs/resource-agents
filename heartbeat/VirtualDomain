#!/bin/sh
#
# Support:	  linux-ha@lists.linux-ha.org
# License:	  GNU General Public License (GPL)
#
#   Resource Agent for domains managed by the libvirt API.
#   Requires a running libvirt daemon (libvirtd).
#
#   (c) 2008-2010 Florian Haas, Dejan Muhamedagic,
#				 and Linux-HA contributors
#
#		usage: $0 {start|stop|status|monitor|migrate_to|migrate_from|meta-data|validate-all}
#
#######################################################################
# Initialization:
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Defaults
OCF_RESKEY_force_stop_default=0
OCF_RESKEY_autoset_utilization_cpu_default="true"
OCF_RESKEY_autoset_utilization_hv_memory_default="true"
OCF_RESKEY_migrateport_default=$(( 49152 + $(ocf_maybe_random) % 64 ))
OCF_RESKEY_CRM_meta_timeout_default=90000
OCF_RESKEY_save_config_on_stop_default=false
OCF_RESKEY_sync_config_on_stop_default=false

: ${OCF_RESKEY_force_stop=${OCF_RESKEY_force_stop_default}}
: ${OCF_RESKEY_autoset_utilization_cpu=${OCF_RESKEY_autoset_utilization_cpu_default}}
: ${OCF_RESKEY_autoset_utilization_hv_memory=${OCF_RESKEY_autoset_utilization_hv_memory_default}}
: ${OCF_RESKEY_migrateport=${OCF_RESKEY_migrateport_default}}
: ${OCF_RESKEY_CRM_meta_timeout=${OCF_RESKEY_CRM_meta_timeout_default}}
: ${OCF_RESKEY_save_config_on_stop=${OCF_RESKEY_save_config_on_stop_default}}
: ${OCF_RESKEY_sync_config_on_stop=${OCF_RESKEY_sync_config_on_stop_default}}

if ocf_is_true ${OCF_RESKEY_sync_config_on_stop}; then
	OCF_RESKEY_save_config_on_stop="true"
fi
#######################################################################

## I'd very much suggest to make this RA use bash,
## and then use magic $SECONDS.
## But for now:
NOW=$(date +%s)

usage() {
  echo "usage: $0 {start|stop|status|monitor|migrate_to|migrate_from|meta-data|validate-all}"
}

meta_data() {
		cat <<EOF
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="VirtualDomain">
<version>1.1</version>

<longdesc lang="en">
Resource agent for a virtual domain (a.k.a. domU, virtual machine,
virtual environment etc., depending on context) managed by libvirtd.
</longdesc>
<shortdesc lang="en">Manages virtual domains through the libvirt virtualization framework</shortdesc>

<parameters>

<parameter name="config" unique="1" required="1">
<longdesc lang="en">
Absolute path to the libvirt configuration file,
for this virtual domain.
</longdesc>
<shortdesc lang="en">Virtual domain configuration file</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="hypervisor" unique="0" required="0">
<longdesc lang="en">
Hypervisor URI to connect to. See the libvirt documentation for
details on supported URI formats. The default is system dependent.
Determine the system's default uri by running 'virsh --quiet uri'.
</longdesc>
<shortdesc lang="en">Hypervisor URI</shortdesc>
<content type="string"/>
</parameter>

<parameter name="force_stop" unique="0" required="0">
<longdesc lang="en">
Always forcefully shut down ("destroy") the domain on stop. The default
behavior is to resort to a forceful shutdown only after a graceful
shutdown attempt has failed. You should only set this to true if
your virtual domain (or your virtualization backend) does not support
graceful shutdown.
</longdesc>
<shortdesc lang="en">Always force shutdown on stop</shortdesc>
<content type="boolean" default="${OCF_RESKEY_force_stop_default}" />
</parameter>

<parameter name="migration_transport" unique="0" required="0">
<longdesc lang="en">
Transport used to connect to the remote hypervisor while
migrating. Please refer to the libvirt documentation for details on
transports available. If this parameter is omitted, the resource will
use libvirt's default transport to connect to the remote hypervisor.
</longdesc>
<shortdesc lang="en">Remote hypervisor transport</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="migration_network_suffix" unique="0" required="0">
<longdesc lang="en">
Use a dedicated migration network. The migration URI is composed by
adding this parameters value to the end of the node name. If the node
name happens to be an FQDN (as opposed to an unqualified host name),
insert the suffix immediately prior to the first period (.) in the FQDN.
At the moment Qemu/KVM and Xen migration via a dedicated network is supported.

Note: Be sure this composed host name is locally resolveable and the
associated IP is reachable through the favored network.
</longdesc>
<shortdesc lang="en">Migration network host name suffix</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="monitor_scripts" unique="0" required="0">
<longdesc lang="en">
To additionally monitor services within the virtual domain, add this
parameter with a list of scripts to monitor.

Note: when monitor scripts are used, the start and migrate_from operations
will complete only when all monitor scripts have completed successfully.
Be sure to set the timeout of these operations to accommodate this delay.
</longdesc>
<shortdesc lang="en">space-separated list of monitor scripts</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="autoset_utilization_cpu" unique="0" required="0">
<longdesc lang="en">
If set true, the agent will detect the number of domainU's vCPUs from virsh, and put it 
into the CPU utilization of the resource when the monitor is executed.
</longdesc>
<shortdesc lang="en">Enable auto-setting the CPU utilization of the resource</shortdesc>
<content type="boolean" default="true" />
</parameter>

<parameter name="autoset_utilization_hv_memory" unique="0" required="0">
<longdesc lang="en">
If set true, the agent will detect the number of *Max memory* from virsh, and put it 
into the hv_memory utilization of the resource when the monitor is executed.
</longdesc>
<shortdesc lang="en">Enable auto-setting the hv_memory utilization of the resource</shortdesc>
<content type="boolean" default="true" />
</parameter>

<parameter name="migrateport" unique="0" required="0">
<longdesc lang="en">
This port will be used in the qemu migrateuri. If unset, the port will be a random highport.
</longdesc>
<shortdesc lang="en">Port for migrateuri</shortdesc>
<content type="integer" />
</parameter>

<parameter name="save_config_on_stop" unique="0" required="0">
<longdesc lang="en">
Changes to a running VM's config are normally lost on stop. 
This parameter instructs the RA to save the configuration back to the xml file provided in the "config" parameter.
</longdesc>
<shortdesc lang="en">Save running VM's config back to its config file</shortdesc>
<content type="boolean" />
</parameter>

<parameter name="sync_config_on_stop" unique="0" required="0">
<longdesc lang="en">
Setting this automatically enables save_config_on_stop. 
When enabled this parameter instructs the RA to 
call csync2 -x to synchronize the file to all nodes.
csync2 must be properly set up for this to work.
</longdesc>
<shortdesc lang="en">Save running VM's config back to its config file</shortdesc>
<content type="boolean" />
</parameter>

<parameter name="snapshot">
<longdesc lang="en">
Path to the snapshot directory where the virtual machine image will be stored.  When this 
parameter is set, the virtual machine's RAM state will be saved to a file in the snapshot
directory when stopped.  If on start a state file is present for the domain, the domain
will be restored to the same state it was in right before it stopped last.  This option
is incompatible with the 'force_stop' option. 
</longdesc>
<shortdesc lang="en">
Restore state on start/stop
</shortdesc>
<content type="string" default=""/>
</parameter>

</parameters>

<actions>
<action name="start" timeout="90" />
<action name="stop" timeout="90" />
<action name="status" depth="0" timeout="30" interval="10" />
<action name="monitor" depth="0" timeout="30" interval="10" />
<action name="migrate_from" timeout="60" />
<action name="migrate_to" timeout="120" />
<action name="meta-data" timeout="5" />
<action name="validate-all" timeout="5" />
</actions>
</resource-agent>
EOF
}

set_util_attr() {
	local attr=$1 val=$2
	local cval outp

	cval=$(crm_resource -Q -r $OCF_RESOURCE_INSTANCE -z -g $attr 2>/dev/null)
	if [ $? -ne 0 ] && [ -z "$cval" ]; then
		crm_resource -Q -r $OCF_RESOURCE_INSTANCE -z -g $attr 2>&1 | grep -e "not connected" > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			ocf_log debug "Unable to set utilization attribute, cib is not available"
			return
		fi
	fi

	if [ "$cval" != "$val" ]; then
		outp=$(crm_resource -r $OCF_RESOURCE_INSTANCE -z -p $attr -v $val 2>&1) ||
		ocf_log warn "crm_resource failed to set utilization attribute $attr: $outp"
	fi
}

update_utilization() {
	local dom_cpu dom_mem

	if ocf_is_true "$OCF_RESKEY_autoset_utilization_cpu"; then
	   dom_cpu=$(LANG=C virsh $VIRSH_OPTIONS dominfo ${DOMAIN_NAME} 2>/dev/null | awk '/CPU\(s\)/{print $2}')
	   test -n "$dom_cpu" && set_util_attr cpu $dom_cpu
	fi
	if ocf_is_true "$OCF_RESKEY_autoset_utilization_hv_memory"; then
	   dom_mem=$(LANG=C virsh $VIRSH_OPTIONS dominfo ${DOMAIN_NAME} 2>/dev/null | awk '/Max memory/{printf("%d", $3/1024)}')
	   test -n "$dom_mem" && set_util_attr hv_memory "$dom_mem"
	fi
}

get_emulator()
{
	local emulator=""

	emulator=$(virsh $VIRSH_OPTIONS dumpxml $DOMAIN_NAME 2>/dev/null | sed -n -e 's/^.*<emulator>\(.*\)<\/emulator>.*$/\1/p')
	if [ -z "$emulator" ] && [ -a "$EMULATOR_STATE" ]; then
		emulator=$(cat $EMULATOR_STATE)
	fi
	if [ -z "$emulator" ]; then
		emulator=$(cat ${OCF_RESKEY_config} | sed -n -e 's/^.*<emulator>\(.*\)<\/emulator>.*$/\1/p')
	fi

	if [ -n "$emulator" ]; then
		basename $emulator
	else 
		ocf_log error "Unable to determine emulator for $DOMAIN_NAME" 
	fi
}

update_emulator_cache()
{
	local emulator

	emulator=$(get_emulator)
	if [ -n "$emulator" ]; then
		echo $emulator > $EMULATOR_STATE
	fi
}

# attempt to check domain status outside of libvirt using the emulator process
pid_status()
{
	local rc=$OCF_ERR_GENERIC
	local emulator=$(get_emulator)

	case "$emulator" in
		qemu-kvm|qemu-system-*)
			rc=$OCF_NOT_RUNNING
			ps awx | grep -E "[q]emu-(kvm|system).*-name $DOMAIN_NAME " > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				rc=$OCF_SUCCESS
			fi
			;;
		libvirt_lxc)
			rc=$OCF_NOT_RUNNING
			ps awx | grep -E "[l]ibvirt_lxc.*-name $DOMAIN_NAME " > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				rc=$OCF_SUCCESS
			fi
			;;
		# This can be expanded to check for additional emulators
		*)
			;;
	esac

	if [ $rc -eq $OCF_SUCCESS ]; then
		ocf_log debug "Virtual domain $DOMAIN_NAME is currently running."
	elif [ $rc -eq $OCF_NOT_RUNNING ]; then
		ocf_log debug "Virtual domain $DOMAIN_NAME is currently not running."
	fi

	return $rc
}

VirtualDomain_Status() {
	local try=0
	rc=$OCF_ERR_GENERIC
	status="no state"
	while [ "$status" = "no state" ]; do
		try=$(($try + 1 ))
		status=$(virsh $VIRSH_OPTIONS domstate $DOMAIN_NAME 2>&1 | tr 'A-Z' 'a-z')
		case "$status" in
			*"error:"*"domain not found"*|"shut off")
				# shut off: domain is defined, but not started, will not happen if
				#   domain is created but not defined
				# Domain not found: domain is not defined and thus not started
				ocf_log debug "Virtual domain $DOMAIN_NAME is not running: $(echo $status | sed s/error://g)"
				rc=$OCF_NOT_RUNNING
				;;
			running|paused|idle|blocked|"in shutdown")
				# running: domain is currently actively consuming cycles
				# paused: domain is paused (suspended)
				# idle: domain is running but idle
				# blocked: synonym for idle used by legacy Xen versions
				# in shutdown: the domain is in process of shutting down, but has not completely shutdown or crashed.
				ocf_log debug "Virtual domain $DOMAIN_NAME is currently $status."
				rc=$OCF_SUCCESS
				;;
			""|*"failed to "*"connect to the hypervisor"*|"no state")
				# Empty string may be returned when virsh does not
				# receive a reply from libvirtd.
				# "no state" may occur when the domain is currently
				# being migrated (on the migration target only), or
				# whenever virsh can't reliably obtain the domain
				# state.
				status="no state"
				if [ "$__OCF_ACTION" = "stop" ] && [ $try -ge 3 ]; then
					# During the stop operation, we want to bail out
					# quickly, so as to be able to force-stop (destroy)
					# the domain if necessary.
					ocf_log error "Virtual domain $DOMAIN_NAME has no state during stop operation, bailing out."
					return $OCF_ERR_GENERIC;
				elif [ "$__OCF_ACTION" = "monitor" ]; then
					pid_status
					rc=$?
					if [ $rc -ne $OCF_ERR_GENERIC ]; then
						# we've successfully determined the domains status outside of libvirt
						return $rc
					fi

				else
					# During all other actions, we just wait and try
					# again, relying on the CRM/LRM to time us out if
					# this takes too long.
					ocf_log info "Virtual domain $DOMAIN_NAME currently has no state, retrying."
				fi
				sleep 1
				;;
			*)
				# any other output is unexpected.
				ocf_log error "Virtual domain $DOMAIN_NAME has unknown status \"$status\"!"
				sleep 1
				;;
		esac
	done
	return $rc
}

verify_undefined() {
	for dom in `virsh --connect=${OCF_RESKEY_hypervisor} list --all --name 2>/dev/null`; do
		if [ "$dom" = "$DOMAIN_NAME" ]; then
			virsh $VIRSH_OPTIONS undefine $DOMAIN_NAME > /dev/null 2>&1
			return
		fi
	done
}

VirtualDomain_Start() {
	local snapshotimage

	if VirtualDomain_Status; then
		ocf_log info "Virtual domain $DOMAIN_NAME already running."
		return $OCF_SUCCESS
	fi

	snapshotimage="$OCF_RESKEY_snapshot/${DOMAIN_NAME}.state"
	if [ -n "$OCF_RESKEY_snapshot" -a -f "$snapshotimage" ]; then
		virsh restore $snapshotimage
		if [ $? -eq 0 ]; then
			rm -f $snapshotimage
			return $OCF_SUCCESS
		fi
		ocf_log error "Failed to restore ${DOMAIN_NAME} from state file in ${OCF_RESKEY_snapshot} directory."
		return $OCF_ERR_GENERIC
	fi

	# Make sure domain is undefined before creating.
	# The 'create' command guarantees that the domain will be
	# undefined on shutdown, but requires the domain to be undefined.
	# if a user defines the domain
	# outside of this agent, we have to ensure that the domain
	# is restored to an 'undefined' state before creating.
	verify_undefined

	virsh $VIRSH_OPTIONS create ${OCF_RESKEY_config}
	rc=$?
	if [ $rc -ne 0 ]; then
		ocf_log error "Failed to start virtual domain ${DOMAIN_NAME}."
		return $OCF_ERR_GENERIC
	fi

	while ! VirtualDomain_Monitor; do
		sleep 1
	done
	
	return $OCF_SUCCESS
}

force_stop()
{
	local out ex
	local status=0

	ocf_log info "Issuing forced shutdown (destroy) request for domain ${DOMAIN_NAME}."
	out=$(virsh $VIRSH_OPTIONS destroy ${DOMAIN_NAME} 2>&1|tr 'A-Z' 'a-z')
	ex=$?
	echo >&2 "$out"
	case $ex$out in
		*"error:"*"domain is not running"*|*"error:"*"domain not found"*)
			: ;; # unexpected path to the intended outcome, all is well
		[!0]*)
			return $OCF_ERR_GENERIC ;;
		0*)
			while [ $status != $OCF_NOT_RUNNING ]; do
				VirtualDomain_Status
				status=$?
			done ;;
	esac
	return $OCF_SUCCESS
}

sync_config(){
	ocf_log info "Syncing $DOMAIN_NAME config file with csync2 -x ${OCF_RESKEY_config}"
	if ! csync2 -x ${OCF_RESKEY_config}; then
		ocf_log warn "Syncing ${OCF_RESKEY_config} failed."; 
	fi
}

save_config(){
	CFGTMP=$(mktemp -t vmcfgsave.XXX)
	virsh $VIRSH_OPTIONS dumpxml --inactive --security-info ${DOMAIN_NAME} > ${CFGTMP}
	if [ -s ${CFGTMP} ]; then
		if ! cmp -s ${CFGTMP} ${OCF_RESKEY_config}; then
			if virt-xml-validate ${CFGTMP} domain 2>/dev/null ;	then
				ocf_log info "Saving domain $DOMAIN_NAME to ${OCF_RESKEY_config}. Please make sure it's present on all nodes or sync_config_on_stop is on."
				if cat ${CFGTMP} > ${OCF_RESKEY_config} ; then
					ocf_log info "Saved $DOMAIN_NAME domain's configuration to ${OCF_RESKEY_config}."
					if ocf_is_true "$OCF_RESKEY_sync_config_on_stop"; then	
						sync_config
					fi
				else	
					ocf_log warn "Moving ${CFGTMP} to ${OCF_RESKEY_config} failed."
				fi
			else
				ocf_log warn "Domain $DOMAIN_NAME config failed to validate after dump. Skipping config update."
			fi
		fi
	else
		ocf_log warn "Domain $DOMAIN_NAME config has 0 size. Skipping config update."
	fi
	rm -f ${CFGTMP}
}

VirtualDomain_Stop() {
	local i
	local status
	local shutdown_timeout
	local needshutdown=1

	VirtualDomain_Status
	status=$?

	case $status in
		$OCF_SUCCESS)
			if ocf_is_true $OCF_RESKEY_force_stop; then
				# if force stop, don't bother attempting graceful shutdown.
				force_stop
				return $?
			fi

			ocf_log info "Issuing graceful shutdown request for domain ${DOMAIN_NAME}."

			if [ -n "$OCF_RESKEY_snapshot" ]; then
				virsh save $DOMAIN_NAME "$OCF_RESKEY_snapshot/${DOMAIN_NAME}.state"
				if [ $? -eq 0 ]; then
					needshutdown=0
				else
					ocf_log error "Failed to save snapshot state of ${DOMAIN_NAME} on stop"
				fi
			fi

			# save config if needed
			if ocf_is_true "$OCF_RESKEY_save_config_on_stop"; then	
				save_config
			fi

			# issue the shutdown if save state didn't shutdown for us
			if [ $needshutdown -eq 1 ]; then
				# Issue a graceful shutdown request
				virsh $VIRSH_OPTIONS shutdown ${DOMAIN_NAME}
			fi

			# The "shutdown_timeout" we use here is the operation
			# timeout specified in the CIB, minus 5 seconds
			shutdown_timeout=$(( $NOW + ($OCF_RESKEY_CRM_meta_timeout/1000) -5 ))
			# Loop on status until we reach $shutdown_timeout
			while [ $NOW -lt $shutdown_timeout ]; do
				VirtualDomain_Status
				status=$?
				case $status in
					$OCF_NOT_RUNNING)
						# This was a graceful shutdown.
						return $OCF_SUCCESS
						;;
					$OCF_SUCCESS)
						# Domain is still running, keep
						# waiting (until shutdown_timeout
						# expires)
						sleep 1
						;;
					*)
						# Something went wrong. Bail out and
						# resort to forced stop (destroy).
						break;
				esac
				NOW=$(date +%s)
			done
			;;
		$OCF_NOT_RUNNING)
			ocf_log info "Domain $DOMAIN_NAME already stopped."
			return $OCF_SUCCESS
	esac

	# OK. Now if the above graceful shutdown hasn't worked, kill
	# off the domain with destroy. If that too does not work,
	# have the LRM time us out.
	force_stop
}

VirtualDomain_Migrate_To() {
	local target_node
	local remoteuri
	local transport_suffix
	local migrateuri
	local migrateport
	local migrate_target
	local hypervisor

	target_node="$OCF_RESKEY_CRM_meta_migrate_target"

	if VirtualDomain_Status; then
		# Find out the remote hypervisor to connect to. That is, turn
		# something like "qemu://foo:9999/system" into
		# "qemu+tcp://bar:9999/system"
		if [ -n "${OCF_RESKEY_migration_transport}" ]; then
			transport_suffix="+${OCF_RESKEY_migration_transport}"
		fi
		# A typical migration URI via a special  migration network looks
		# like "tcp://bar-mig:49152". The port would be randomly chosen
		# by libvirt from the range 49152-49215 if omitted, at least since
		# version 0.7.4 ...
		if [ -n "${OCF_RESKEY_migration_network_suffix}" ]; then
			hypervisor="${OCF_RESKEY_hypervisor%%[+:]*}"
			# Hostname might be a FQDN
			migrate_target=$(echo ${target_node} | sed -e "s,^\([^.]\+\),\1${OCF_RESKEY_migration_network_suffix},")
			case $hypervisor in
				qemu)
					# For quiet ancient libvirt versions a migration port is needed
					# and the URI must not contain the "//". Newer versions can handle
					# the "bad" URI.
					migrateuri="tcp:${migrate_target}:${OCF_RESKEY_migrateport}"
					;;
				xen)
					migrateuri="xenmigr://${migrate_target}"
					;;
				*)
					ocf_log warn "$DOMAIN_NAME: Migration via dedicated network currently not supported for ${hypervisor}."
					;;
			esac
		fi
		# Scared of that sed expression? So am I. :-)
		remoteuri=$(echo ${OCF_RESKEY_hypervisor} | sed -e "s,\(.*\)://[^/:]*\(:\?[0-9]*\)/\(.*\),\1${transport_suffix}://${target_node}\2/\3,")

		# save config if needed
		if ocf_is_true "$OCF_RESKEY_save_config_on_stop"; then	
			save_config
		fi

		# OK, we know where to connect to. Now do the actual migration.
		ocf_log info "$DOMAIN_NAME: Starting live migration to ${target_node} (using remote hypervisor URI ${remoteuri} ${migrateuri})."
		virsh ${VIRSH_OPTIONS} migrate --live $DOMAIN_NAME ${remoteuri} ${migrateuri}
		rc=$?
		if [ $rc -ne 0 ]; then
			ocf_log err "$DOMAIN_NAME: live migration to ${remoteuri} ${migrateuri} failed: $rc"
			return $OCF_ERR_GENERIC
		else
			ocf_log info "$DOMAIN_NAME: live migration to ${target_node} succeeded."
			return $OCF_SUCCESS
		fi
	else
		ocf_log err "$DOMAIN_NAME: migrate_to: Not active locally!"
		return $OCF_ERR_GENERIC
	fi
}

VirtualDomain_Migrate_From() {
	while ! VirtualDomain_Monitor; do
		sleep 1
	done
	ocf_log info "$DOMAIN_NAME: live migration from ${OCF_RESKEY_CRM_meta_migrate_source} succeeded."
	# save config if needed
	if ocf_is_true "$OCF_RESKEY_save_config_on_stop"; then	
		save_config
	fi
	return $OCF_SUCCESS
}

VirtualDomain_Monitor() {
	# First, check the domain status. If that returns anything other
	# than $OCF_SUCCESS, something is definitely wrong.
	VirtualDomain_Status
	rc=$?
	if [ ${rc} -eq ${OCF_SUCCESS} ]; then
		# OK, the generic status check turned out fine.  Now, if we
		# have monitor scripts defined, run them one after another.
		for script in ${OCF_RESKEY_monitor_scripts}; do
			script_output="$($script 2>&1)"
			script_rc=$?
			if [ ${script_rc} -ne ${OCF_SUCCESS} ]; then
				# A monitor script returned a non-success exit
				# code. Stop iterating over the list of scripts, log a
				# warning message, and propagate $OCF_ERR_GENERIC.
				ocf_log warn "Monitor command \"${script}\" for domain ${DOMAIN_NAME} returned ${script_rc} with output: ${script_output}"
				rc=$OCF_ERR_GENERIC
				break
			else
				ocf_log debug "Monitor command \"${script}\" for domain ${DOMAIN_NAME} completed successfully with output: ${script_output}"
			fi
		done
	fi

	update_emulator_cache
	update_utilization
   # Save configuration on monitor as well, so we will have a better chance of 
	# having fresh and up to date config files on all nodes.
	if ocf_is_true "$OCF_RESKEY_save_config_on_stop"; then	
		save_config
	fi

	return ${rc}
}

VirtualDomain_Validate_All() {
	# Required binaries:
	for binary in virsh sed; do
		check_binary $binary
	done

	if [ -z $OCF_RESKEY_config ]; then
		ocf_log error "Missing configuration parameter \"config\"."
		return $OCF_ERR_CONFIGURED
	fi

	if ocf_is_true $OCF_RESKEY_force_stop; then
		if [ -n "$OCF_RESKEY_snapshot" ]; then
			ocf_log error "The 'force_stop' and 'snapshot' options can not be used together."
			return $OCF_ERR_CONFIGURED
		fi
	fi

	# check if we can read the config file (otherwise we're unable to
	# deduce $DOMAIN_NAME from it, see below)
	if [ ! -r $OCF_RESKEY_config ]; then
		if ocf_is_probe; then
			ocf_log info "Configuration file $OCF_RESKEY_config not readable during probe."
		elif [ "$__OCF_ACTION" = "stop" ]; then
			ocf_log info "Configuration file $OCF_RESKEY_config not readable, resource considered stopped."
		else
			ocf_log error "Configuration file $OCF_RESKEY_config does not exist or is not readable."
			return $OCF_ERR_INSTALLED
		fi
	fi

	# Check if csync2 is available when config tells us we might need it.
	if ocf_is_true $OCF_RESKEY_sync_config_on_stop; then
		check_binary csync2; 
	fi
}

if [ $# -ne 1 ]; then
	usage
	exit $OCF_ERR_ARGS
fi

case $1 in
	meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
	usage)	usage
		exit $OCF_SUCCESS
		;;
esac

# Grab the virsh uri default, but only if hypervisor isn't set
: ${OCF_RESKEY_hypervisor=$(virsh --quiet uri 2>/dev/null)}

# Set options to be passed to virsh:
VIRSH_OPTIONS="--connect=${OCF_RESKEY_hypervisor} --quiet"

# Everything except usage and meta-data must pass the validate test
VirtualDomain_Validate_All || exit $?

# During a probe, it is permissible for the config file to not be
# readable (it might be on shared storage not available during the
# probe). In that case, we're
# unable to get the domain name. Thus, we also can't check whether the
# domain is running. The only thing we can do here is to assume that
# it is not running.
if [ ! -r $OCF_RESKEY_config ]; then
	ocf_is_probe && exit $OCF_NOT_RUNNING
	[ "$__OCF_ACTION" = "stop" ] && exit $OCF_SUCCESS
fi

# Retrieve the domain name from the xml file.
DOMAIN_NAME=`egrep '[[:space:]]*<name>.*</name>[[:space:]]*$' ${OCF_RESKEY_config} | sed -e 's/[[:space:]]*<name>\(.*\)<\/name>[[:space:]]*$/\1/' 2>/dev/null`
if [ -z $DOMAIN_NAME ]; then
	ocf_log err "This is unexpected. Cannot determine domain name."
	exit $OCF_ERR_GENERIC
fi

EMULATOR_STATE="${HA_RSCTMP}/VirtualDomain-${DOMAIN_NAME}-emu.state"

case $1 in
	start)
		VirtualDomain_Start
		;;
	stop)
		VirtualDomain_Stop
		;;
	migrate_to)
		VirtualDomain_Migrate_To
		;;
	migrate_from)
		VirtualDomain_Migrate_From
		;;
	status)
		VirtualDomain_Status
		;;
	monitor)
		VirtualDomain_Monitor
		;;
	validate-all)
		;;
	*)
		usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
exit $?

