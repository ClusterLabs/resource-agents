#
# This is OCF Linux distribution query support
# 
# Currently needed for the nfsserver RA which has some already
# released RH specific stuff (/etc/sysconfig/nfs editing)
# 

_DEBIAN_VERSION_FILE="/etc/debian_version"
_REDHAT_RELEASE_FILE="/etc/redhat-release"
_SUSE_RELEASE_FILE="/etc/SuSE-release"
_RELEASE_FILES="/etc/*-release"
_DEBIAN_BASED_DISTROS_RE="debian|ubuntu"
_REDHAT_BASED_DISTROS_RE="red *hat|fedora|centos|scientific"
_SUSE_BASED_DISTROS_RE="sles|suse"

get_release_id() {
	if which lsb_release >/dev/null 2>&1; then
		lsb_release -si
	elif [ -e $_DEBIAN_VERSION_FILE ]; then
		echo Debian
	elif [ -e $_SUSE_RELEASE_FILE ]; then
		echo SUSE
	elif [ -e $_REDHAT_RELEASE_FILE ]; then
		echo Redhat
	else # FIXME not exactly the id here, but will do for our purpose
		cat $_RELEASE_FILES 2>/dev/null
	fi
}

get_os_version_id() {
	if which lsb_release >/dev/null 2>&1; then
		_ver=$(lsb_release -sr)
	elif [ -f "$_DEBIAN_VERSION_FILE" ]; then
		_ver=$(cat "$_DEBIAN_VERSION_FILE")
	elif [ -f "$_REDHAT_RELEASE_FILE" ]; then
		_ver=$(sed "s/.* release \([^ ]\+\).*/\1/" \
			"$_REDHAT_RELEASE_FILE")
	elif [ -f "$_SUSE_RELEASE_FILE" ]; then
		_ver=$(awk '$1 == "VERSION" {print $3}' "$_SUSE_RELEASE_FILE")

		_patchlevel=$(awk '$1 == "PATCHLEVEL" {print $3}' \
				"$_SUSE_RELEASE_FILE")
		[ -n "$_patchlevel" ] && _ver="${_ver}.${_patchlevel}"
	else
		_ver=$(uname -r)
	fi

	# Discard everything in _ver except the version.
	# Use ocf_version_cmp() format if present, or bare integer
	# otherwise.
	# Append ".0" for integers so that ocf_version_cmp() doesn't
	# fail.
	_ver_cmp_fmt="[[:digit:]][[:digit:].-]*[[:digit:]]"
	_ver=$(echo "$_ver" \
		| sed -n -e "s/[^[:digit:]]*\(${_ver_cmp_fmt}\).*/\1/p" \
			-e "s/[^[:digit:]]*\([[:digit:]]*\).*/\1.0/p" \
		| head -n 1)

	echo "$_ver"
}

# Returns true if the OS is Debian-based, otherwise false
is_debian_based() {
	get_release_id | grep -Eqi "$_DEBIAN_BASED_DISTROS_RE"
}

# Returns true if the OS is Red Hat-based, otherwise false
is_redhat_based() {
	get_release_id | grep -Eqi "$_REDHAT_BASED_DISTROS_RE"
}

# Returns true if the OS is SUSE-based, otherwise false
is_suse_based() {
	get_release_id | grep -Eqi "$_SUSE_BASED_DISTROS_RE"
}

# Sets global variables OS and VER.
# get_os_ver() is currently unused upstream; maintained for backwards
# compatibility.
get_os_ver() {
	OS=$(get_release_id)
	VER=$(get_os_version_id)
}
