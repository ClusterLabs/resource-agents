#!/usr/bin/env bash
#
# The IPAlias HA resource agent adds and removes aliases from network
# interfaces. It is designed for *BSD systems using "ifconfig" instead
# of "ip" (Linux).
#
# Copyright (c) 2018 Mathieu GRZYBEK <mathieu@grzybek.fr>
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

meta_data()
{
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="IPAlias">
<version>1.0</version>

<longdesc lang="en">
The IPAlias HA resource agent adds and removes aliases from network
interfaces. It is designed for *BSD systems using "ifconfig" instead
of "ip" (Linux).
</longdesc>
<shortdesc lang="en">IP Alias resource agent.</shortdesc>

<parameters>
<parameter name="ip" required="1" unique="1">
<longdesc lang="en">
The IP address to manage.
</longdesc>
<shortdesc lang="en">IP Address.</shortdesc>
<content type="string"/>
</parameter>

<parameter name="netmask" required="1" unique="1">
<longdesc lang="en">
The network mask of the IP address.
</longdesc>
<shortdesc lang="en">Network mask.</shortdesc>
<content type="string"/>
</parameter>

<parameter name="interface" required="1" unique="1">
<longdesc lang="en">
The interface to manage.
</longdesc>
<shortdesc lang="en">Network interface.</shortdesc>
<content type="string"/>
</parameter>

</parameters>

<actions>
<action name="start"        timeout="90" />
<action name="stop"         timeout="90" />
<action name="monitor"      timeout="30" interval="30" depth="0" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="30" />
</actions>
</resource-agent>
END
}

#######################################################################

ipalias_usage()
{
	cat <<END
usage: $0 {start|stop|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

ipalias_monitor()
{
	ifconfig $OCF_RESKEY_interface|grep -q $OCF_RESKEY_ip
	if [ $? -ne 0 ]; then
		return $OCF_NOT_RUNNING
	fi

	return $OCF_SUCCESS
}

ipalias_start()
{
	ifconfig $OCF_RESKEY_interface alias $OCF_RESKEY_ip netmask $OCF_RESKEY_netmask
	if [ $? -ne $OCF_SUCCESS ]; then
		return $OCF_ERR_GENERIC
	fi

	return $OCF_SUCCESS
}

ipalias_stop()
{
	ipalias_monitor
	if [ $? -eq $OCF_NOT_RUNNING ]; then
		return $OCF_SUCCESS
	fi

	ifconfig $OCF_RESKEY_interface inet $OCF_RESKEY_ip netmask $OCF_RESKEY_netmask delete
	if [ $? -ne 0 ]; then
		return $OCF_ERR_GENERIC
	fi

	return $OCF_SUCCESS
}

ipalias_validate()
{
	return $OCF_SUCCESS
}

case $__OCF_ACTION in
	meta-data) meta_data
		exit $OCF_SUCCESS;;
	start)
		ipalias_validate
		ipalias_start;;
	stop)		ipalias_stop;;
	monitor)	ipalias_monitor;;
	validate-all)	ipalias_validate;;
	usage|help)	ipalias_usage
		exit $OCF_SUCCESS
		;;
	*)		ipalias_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac

rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
