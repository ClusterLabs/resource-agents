#!/bin/sh
#
#
# OCF resource agent to move a floating address in an Openstack tenant.
#
# Copyright (c) 2018 Mathieu GRZYBEK
# Based on code of Markus Guertler
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#


#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

. ${OCF_FUNCTIONS_DIR}/openstack-common.sh

# Defaults

#######################################################################


USAGE="usage: $0 {start|stop|status|meta-data}";
###############################################################################


###############################################################################
#
# Functions
#
###############################################################################


metadata() {
cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="openstack-floating-ip" version="2.0">
<version>1.0</version>
<longdesc lang="en">
Resource Agent to move a floating IP address from an instance to another one.
It relies on attributes given by openstack-info resource agent (openstack_ports, openstack_id attributes).
The attribute called "openstack_floating_ip" is updated.
</longdesc>
<shortdesc lang="en">Move a floating IP</shortdesc>

<parameters>
END

common_meta_data

cat <<END
<parameter name="ip_id" required="1">
<longdesc lang="en">
Floating IP Identifier.
</longdesc>
<shortdesc lang="en">IP ID</shortdesc>
<content type="string" />
</parameter>

<parameter name="subnet_id" required="1">
<longdesc lang="en">
Subnet Identifier to use to attach the address.
</longdesc>
<shortdesc lang="en">Subnet ID</shortdesc>
<content type="string" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="180s" />
<action name="stop" timeout="180s" />
<action name="monitor" depth="0" timeout="180s" interval="60s" />
<action name="validate-all" timeout="5s" />
<action name="meta-data" timeout="5s" />
</actions>
</resource-agent>
END
}

osflip_validate() {
	local result

	check_binary "$OCF_RESKEY_openstackcli"

	get_config

	result=$(run_openstackcli "floating ip list")
	if ! echo "$result" | grep -q $OCF_RESKEY_ip_id; then
		ocf_exit_reason "ip-id $OCF_RESKEY_ip_id not found"
		return $OCF_ERR_CONFIGURED
	fi

	${HA_SBIN_DIR}/attrd_updater --query -n openstack_ports -N $(crm_node -n) > /dev/null 2>&1
	if [ $? -ne 0 ] && ! ocf_is_probe; then
		ocf_log warn "attr_updater failed to get openstack_ports attribute of node $OCF_RESOURCE_INSTANCE"
		return $OCF_ERR_GENERIC
	fi

	return $OCF_SUCCESS
}

osflip_monitor() {
	local result
	local floating_ip
	local node_port_ids
	local port
	local buffer

	node_port_ids=$(${HA_SBIN_DIR}/attrd_updater --query -n openstack_ports -N $(crm_node -n) \
		| awk -F= '{gsub("\"","");print $NF}' \
		| tr ',' ' ' \
		| awk '{gsub("[^ ]*:", "");print}')

	# Is the IPÂ active and attached?
	result=$(run_openstackcli "floating ip show \
		--column port_id --column floating_ip_address \
		--format yaml \
		$OCF_RESKEY_ip_id")

	for port in $node_port_ids ; do
		if echo "$result" | grep -q $port ; then
			floating_ip=$(echo "$result" | awk '/floating_ip_address/ {print $2}')
			${HA_SBIN_DIR}/attrd_updater ${OCF_RESKEY_delay} -n openstack_floating_ip -v $floating_ip

			return $OCF_SUCCESS
		fi
	done

	${HA_SBIN_DIR}/attrd_updater ${OCF_RESKEY_delay} -D -n openstack_floating_ip
	ocf_log warn "$OCF_RESKEY_ip_id is not attached to any fixed address"
	return $OCF_NOT_RUNNING
}

osflip_stop() {
	ocf_log info "Bringing down IP address $OCF_RESKEY_ip_id"

	osflip_monitor
	if [ $? = $OCF_NOT_RUNNING ]; then
		ocf_log info "Address $OCF_RESKEY_ip_id already down"
		return $OCF_SUCCESS
	fi

	if ! run_openstackcli "floating ip unset --port $OCF_RESKEY_ip_id"; then
		return $OCF_ERR_GENERIC
	fi

	osflip_monitor
	if [ $? != $OCF_NOT_RUNNING ]; then
		ocf_log error "Couldn't unset IP address $OCF_RESKEY_ip_id."
		return $OCF_ERR_GENERIC
	fi

	ocf_log info "Successfully brought down $OCF_RESKEY_ip_id"
	return $OCF_SUCCESS
}

osflip_start() {
	local node_port_id
	local node_port_ids

	osflip_monitor
	if [ $? = $OCF_SUCCESS ]; then
		ocf_log info "$OCF_RESKEY_ip_id already started"
		return $OCF_SUCCESS
	fi

	# Get port_id from subnet_id
	node_port_ids=$(${HA_SBIN_DIR}/attrd_updater --query -n openstack_ports -N $(crm_node -n) \
		| awk '{gsub("value=","") ; gsub("\"","") ; print $NF}')

	node_port_id=$(echo $node_port_ids \
		| tr ',' '\n' \
		| awk -F: "/$OCF_RESKEY_subnet_id/ {print \$2}")

	ocf_log info "Moving IP address $OCF_RESKEY_ip_id to port ID $node_port_id"

	run_openstackcli "floating ip set --port $node_port_id $OCF_RESKEY_ip_id"
	if [ $? != $OCF_SUCCESS ]; then
		ocf_log error "$OCF_RESKEY_ip_id Cannot be set to port $node_port_id"
		return $OCF_ERR_GENERIC
	fi

	osflip_monitor
	if [ $? != $OCF_SUCCESS ]; then
		ocf_log error "$OCF_RESKEY_ip_id Cannot be set to port $node_port_id"
		return $OCF_ERR_GENERIC
	fi

	ocf_log info "Successfully brought up $OCF_RESKEY_ip_id"
	return $OCF_SUCCESS
}

###############################################################################
#
# MAIN
#
###############################################################################

case $__OCF_ACTION in
	meta-data)
		metadata
		exit $OCF_SUCCESS
		;;
	usage|help)
		echo $USAGE
		exit $OCF_SUCCESS
		;;
esac

if ! ocf_is_root; then
	ocf_log err "You must be root for $__OCF_ACTION operation."
	exit $OCF_ERR_PERM
fi

case $__OCF_ACTION in
	start)
		osflip_validate || exit $?
		osflip_start;;
	stop)
		osflip_validate || exit $?
		osflip_stop;;
	monitor)
		osflip_validate || exit $?
		osflip_monitor;;
	validate-all)
		osflip_validate
		;;
	*)
		echo $USAGE
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac

exit $?
