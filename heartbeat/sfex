#!/bin/sh
#
#       Shared Disk File EXclusiveness (SF-EX) OCF RA. 
#       prevent a destruction of data on shared disk file system 
#	due to Split-Brain.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  
# 02110-1301, USA.
#
# Copyright (c) 2007 NIPPON TELEGRAPH AND TELEPHONE CORPORATION
#
# NOTE:
#	As a prerequisite for running SF-EX, one device should be
#	initialized as below.
#
#		sfex_init [-n <numlocks>] <device>
#
#	Example:
#
#		/usr/sbin/sfex_init -n 10 /dev/sdb1
#
#	if further information is necessary, See README.
#
#######################################################################
# Initialization:

# switching ocf-shellfuncs path
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Parameter defaults

OCF_RESKEY_device_default=""
OCF_RESKEY_index_default="1"
OCF_RESKEY_collision_timeout_default="1"
OCF_RESKEY_monitor_interval_default="10"
OCF_RESKEY_lock_timeout_default="100"

: ${OCF_RESKEY_device=${OCF_RESKEY_device_default}}
: ${OCF_RESKEY_index=${OCF_RESKEY_index_default}}
: ${OCF_RESKEY_collision_timeout=${OCF_RESKEY_collision_timeout_default}}
: ${OCF_RESKEY_monitor_interval=${OCF_RESKEY_monitor_interval_default}}
: ${OCF_RESKEY_lock_timeout=${OCF_RESKEY_lock_timeout_default}}

#######################################################################

SFEX_DAEMON=${HA_BIN}/sfex_daemon

usage() {
    cat <<END
    usage: $0 {start|stop|monitor|meta-data}
END
}

meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="sfex">
<version>1.3</version>

<longdesc lang="en">
Resource script for SF-EX. It manages a shared storage medium exclusively .
</longdesc>
<shortdesc lang="en">Manages exclusive access to shared storage using Shared Disk File EXclusiveness (SF-EX)</shortdesc>
<parameters>
<parameter name="device" unique="0" required="1">
<longdesc lang="en">
Block device path that stores exclusive control data.
</longdesc>
<shortdesc lang="en">block device</shortdesc>
<content type="string" default="${OCF_RESKEY_device_default}" />
</parameter>
<parameter name="index" unique="0" required="0">
<longdesc lang="en">
Location in block device where exclusive control data is stored. 1 or more is specified. Default is 1.
</longdesc>
<shortdesc lang="en">index</shortdesc>
<content type="integer" default="${OCF_RESKEY_index_default}" />
</parameter>
<parameter name="collision_timeout" unique="0" required="0">
<longdesc lang="en">
Waiting time when a collision of lock acquisition is detected. Default is 1 second.
</longdesc>
<shortdesc lang="en">waiting time for lock acquisition</shortdesc>
<content type="integer" default="${OCF_RESKEY_collision_timeout_default}" />
</parameter>
<parameter name="monitor_interval" unique="0" required="0">
<longdesc lang="en">
Monitor interval(sec). Default is ${OCF_RESKEY_monitor_interval_default} seconds
</longdesc>
<shortdesc lang="en">monitor interval</shortdesc>
<content type="integer" default="${OCF_RESKEY_monitor_interval_default}" />
</parameter>
<parameter name="lock_timeout" unique="0" required="0">
<longdesc lang="en">
Valid term of lock(sec). Default is ${OCF_RESKEY_lock_timeout_default} seconds.
The lock_timeout is calculated by the following formula.

  lock_timeout = monitor_interval + "The expiration time of the lock"

We suggest 90 seconds as a default value of the "The expiration time of the lock", but you should change it in consideration of access delay to the shared disk and the switch time of the multipath driver.

The lock timeout have an impact on start action timeout because start action timeout value is calculated by the following formula.

  start timeout = collision_timeout + lock_timeout + "safety margin"

The "safety margin" is decided within the range of about 10-20 seconds(It depends on your system requirement).
</longdesc>
<shortdesc lang="en">Valid term of lock</shortdesc>
<content type="integer" default="${OCF_RESKEY_lock_timeout_default}" />
</parameter>
</parameters>

<actions>
<action name="start" timeout="120s" />
<action name="stop" timeout="20s" />
<action name="monitor" depth="0" timeout="10s" interval="10s" />
<action name="meta-data" timeout="5s" />
<action name="validate-all" timeout="5s" />
</actions>
</resource-agent>
END
}

#
# START: Exclusive control starts.
#
# It loops permanently until the lock can be acquired when locked with 
# the other node. In this case, the reception of the stop signal by the 
# timeout time passage set to CIB becomes the only stop opportunity. 
#
sfex_start() {
	ocf_log info "sfex_daemon: starting..."

	sfex_monitor
	if [ $? -eq $OCF_SUCCESS ]; then
		ocf_log info "sfex_daemon already started."
		return $OCF_SUCCESS
	fi

	$SFEX_DAEMON -i $INDEX -c $COLLISION_TIMEOUT -t $LOCK_TIMEOUT -m $MONITOR_INTERVAL -r ${OCF_RESOURCE_INSTANCE} $DEVICE

	rc=$?
	if [ $rc -ne 0 ]; then
		ocf_log err "sfex_daemon failed to start."
		return $OCF_ERR_GENERIC
	fi
	
	while :
	do
		sfex_monitor
		if [ $? -eq $OCF_SUCCESS ]; then
			ocf_log info "sfex_daemon: started."
			return $OCF_SUCCESS
		fi
		ocf_log debug "Waiting for the start-up of the sfex_daemon..."
		sleep 1
	done
	ocf_log err "Can't find a sfex_daemon process. Starting a sfex_daemon failed."
	return $OCF_ERR_GENERIC
}

#
# STOP: stop exclusive control 
#
sfex_stop() {
	ocf_log info "sfex_daemon: stopping..."

	# Check the sfex daemon has already stopped.
	sfex_monitor
	if [ $? -eq $OCF_NOT_RUNNING ]; then
		ocf_log info "sfex_daemon already stopped."
		return $OCF_SUCCESS
	fi

	# Stop sfex daemon by sending SIGTERM signal.
	pid=`/usr/bin/pgrep -f "$SFEX_DAEMON .* ${OCF_RESOURCE_INSTANCE} "`
	/bin/kill $pid
	rc=$?
	if [ $rc -ne 0 ]; then
		ocf_log err "sfex_daemon failed to stop"
		return $rc
	fi

#sfex could be in state D if the device is gone, and then not terminate.	
#Wait and check again if the daemon is already properly shutdown.

	shutdown_timeout=$((($OCF_RESKEY_CRM_meta_timeout/1000)-5))
	count=0
	while [ $count -lt $shutdown_timeout ]
	do
		sfex_monitor
		if [ $? -eq $OCF_NOT_RUNNING ]; then
			ocf_log info "sfex_daemon: stopped."
			return $OCF_SUCCESS
		fi
		count=`expr $count + 1`
		ocf_log debug "waiting for sfex_daemon to exit ($count/$shutdown_timeout)"
		sleep 1
	done
	
	sfex_monitor
	if [ $? -ne $OCF_NOT_RUNNING ]; then
		ocf_log warn "regular shutdown of sfex_daemon timed out, using SIGKILL"
		/bin/kill -s KILL $pid
	fi

	while :
	do
		sfex_monitor
		if [ $? -eq $OCF_NOT_RUNNING ]; then
			break;
		fi
		ocf_log debug "waiting for sfex_daemon to exit after SIGKILL"
		sleep 1
	done

	ocf_log info "sfex_daemon: stopped."
	return $OCF_SUCCESS
}

sfex_monitor() {
	ocf_log debug "sfex_monitor: started..."

	# Find a sfex_daemon process using daemon name and resource name.
	if /usr/bin/pgrep -f "$SFEX_DAEMON .* ${OCF_RESOURCE_INSTANCE} " > /dev/null 2>&1; then
		ocf_log debug "sfex_monitor: complete. sfex_daemon is running."
		return $OCF_SUCCESS
	fi

	ocf_log debug "sfex_monitor: complete. sfex_daemon is not running."
	return $OCF_NOT_RUNNING
}

#
# main process 
#

# check arguments
if [ $# -ne 1 ]; then
	usage
	exit $OCF_ERR_ARGS
fi
OP=$1

# These operations do not require instance parameters
case $OP in
	meta-data)
		meta_data
		exit $OCF_SUCCESS
		;;
	usage)
		usage
		exit $OCF_SUCCESS
		;;
esac

# check parameters
DEVICE=$OCF_RESKEY_device
INDEX=${OCF_RESKEY_index}
COLLISION_TIMEOUT=${OCF_RESKEY_collision_timeout}
LOCK_TIMEOUT=${OCF_RESKEY_lock_timeout}
MONITOR_INTERVAL=${OCF_RESKEY_monitor_interval}

sfex_validate () {
if [ -z "$DEVICE" ]; then
	ocf_log err "Please set OCF_RESKEY_device to device for sfex meta-data"
	exit $OCF_ERR_ARGS
fi
if [ ! -w "$DEVICE" ]; then
	ocf_log warn "Couldn't find device [$DEVICE]. Expected /dev/??? to exist"
	exit $OCF_ERR_ARGS
fi
}

if [ -n "$OCF_RESKEY_CRM_meta_clone" ]; then
	ocf_log err "THIS RA DO NOT SUPPORT CLONE MODE!"
	exit $OCF_ERR_CONFIGURED
fi

case $OP in
	start)
		sfex_start
		;;
	stop)
		sfex_stop
		;;
	monitor)
		sfex_monitor
		;;
	validate-all)
		sfex_validate
		;;
	*)
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
exit $?
