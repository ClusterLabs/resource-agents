#!/bin/sh
#
# SAPDatabase
#
# Description:	Manages any type of SAP supported database instance
#               as a High-Availability OCF compliant resource.
#
# Author:       Alexander Krauth, October 2006
# Support:      linux@sap.com
# License:      GNU General Public License (GPL)
# Copyright:    (c) 2006, 2007, 2012 Alexander Krauth
#
# An example usage: 
#      See usage() function below for more details...
#
# OCF instance parameters:
#       OCF_RESKEY_SID
#       OCF_RESKEY_DIR_EXECUTABLE    (optional, well known directories will be searched by default)
#       OCF_RESKEY_DBTYPE            (mandatory, one of the following values: ORA,ADA,DB6)
#       OCF_RESKEY_DBINSTANCE        (optional, Database instance name, if not equal to SID)
#       OCF_RESKEY_NETSERVICENAME    (optional, non standard name of Oracle Listener)
#       OCF_RESKEY_DBJ2EE_ONLY       (optional, default is false)
#       OCF_RESKEY_JAVA_HOME         (optional, only needed if DBJ2EE_ONLY is true and JAVA_HOME enviroment variable is not set)
#       OCF_RESKEY_STRICT_MONITORING (optional, activate application level monitoring - with Oracle a failover will occur in case of an archiver stuck)
#       OCF_RESKEY_AUTOMATIC_RECOVER (optional, automatic startup recovery, default is false)
#       OCF_RESKEY_MONITOR_SERVICES  (optional, default is to monitor all database services)
#       OCF_RESKEY_DIR_BOOTSTRAP     (optional, if non standard J2EE server directory)
#       OCF_RESKEY_DIR_SECSTORE      (optional, if non standard J2EE secure store directory)
#       OCF_RESKEY_DB_JARS           (optional, if maintained in bootstrap.properties, mandatory for WebAS Java 7.10)
#       OCF_RESKEY_PRE_START_USEREXIT  (optional, lists a script which can be executed before the resource is started)
#       OCF_RESKEY_POST_START_USEREXIT (optional, lists a script which can be executed after the resource is started)
#       OCF_RESKEY_PRE_STOP_USEREXIT   (optional, lists a script which can be executed before the resource is stopped)
#       OCF_RESKEY_POST_STOP_USEREXIT  (optional, lists a script which can be executed after the resource is stopped)
#
# ToDo:
# Remove all the database dependend stuff from the agent and use
# saphostcontrol daemon as soon as SAP will release it.
#
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

SH=/bin/sh

usage() {
  methods=`sapdatabase_methods`
  methods=`echo $methods | tr ' ' '|'`
  cat <<-!
	usage: $0 ($methods)

	$0 manages a SAP database of any type as an HA resource.
        Currently Oracle, MaxDB and DB/2 UDB are supported.
        ABAP databases as well as JAVA only databases are supported.

	The 'start' operation starts the instance.
	The 'stop' operation stops the instance.
	The 'status' operation reports whether the instance is running
	The 'monitor' operation reports whether the instance seems to be working
	The 'recover' operation tries to recover the instance after a crash (instance will be stopped first!)
	The 'validate-all' operation reports whether the parameters are valid
	The 'methods' operation reports on the methods $0 supports

	!
}

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="SAPDatabase">
<version>2.00</version>

<shortdesc lang="en">Manages a SAP database instance as an HA resource.</shortdesc>
<longdesc lang="en">
Resource script for SAP databases. It manages a SAP database of any type as an HA resource.

The purpose of the resource agent is to start, stop and monitor the database instance of a SAP system. Together with the RDBMS system it will also control the related network service for the database. Like the Oracle Listener and the xserver of MaxDB.
The resource agent expects a standard SAP installation of the database and therefore needs less parameters to configure.
The resource agent supports the following databases:
- Oracle 10.2 and 11.2
- DB/2 UDB for Windows and Unix 9.x
- SAP-DB / MaxDB 7.x

In fact this resource agent does not run any database commands directly. It uses the SAP standard process SAPHostAgent to control the database.
The SAPHostAgent must be installed on each cluster node locally. It will not work, if you try to run the SAPHostAgent also as a HA resource.
Please follow SAP note 1031096 for the installation of SAPHostAgent.
The required minimum version of SAPHostAgent is:
Release: 7.20
Patch Number: 90
or compile time after: Dec 17 2011
</longdesc>
<parameters>
 <parameter name="SID" unique="1" required="1">
  <longdesc lang="en">The unique SAP system identifier. e.g. P01</longdesc>
  <shortdesc lang="en">SAP system ID</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="DIR_EXECUTABLE" unique="0" required="0">
  <longdesc lang="en">The full qualified path where to find sapstartsrv and sapcontrol.</longdesc>
  <shortdesc lang="en">path of sapstartsrv and sapcontrol</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="DBTYPE" unique="0" required="1">
  <longdesc lang="en">The name of the database vendor you use. Set either: ORA,DB6,ADA</longdesc>
  <shortdesc lang="en">database vendor</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="DBINSTANCE" unique="1" required="0">
  <longdesc lang="en">Must be used for special database implementations, when database instance name is not equal to the SID (e.g. Oracle DataGuard)</longdesc>
  <shortdesc lang="en">Database instance name, if not equal to SID</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="NETSERVICENAME" unique="0" required="0">
  <longdesc lang="en">The Oracle TNS listener name.</longdesc>
  <shortdesc lang="en">listener name</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="DBJ2EE_ONLY" unique="0" required="0">
  <longdesc lang="en">If you do not have a ABAP stack installed in the SAP database, set this to TRUE</longdesc>
  <shortdesc lang="en">only JAVA stack installed</shortdesc>
  <content type="boolean" default="false"/>
 </parameter>
 <parameter name="JAVA_HOME" unique="0" required="0">
  <longdesc lang="en">This is only needed if the DBJ2EE_ONLY parameter is set to true. Enter the path to the Java SDK which is used by the SAP WebAS Java</longdesc>
  <shortdesc lang="en">Path to Java SDK</shortdesc>
  <content type="string" default=""/>
 </parameter>
 <parameter name="STRICT_MONITORING" unique="0" required="0">
  <longdesc lang="en">This controls how the resource agent monitors the database. If set to true, it will use SAP tools to test the connect to the database. Do not use with Oracle, because it will result in unwanted failovers in case of an archiver stuck</longdesc>
  <shortdesc lang="en">Activates application level monitoring</shortdesc>
  <content type="boolean" default="false"/>
 </parameter>
 <parameter name="AUTOMATIC_RECOVER" unique="0" required="0">
  <longdesc lang="en">The SAPDatabase resource agent tries to recover a failed start attempt automaticaly one time. This is done by running a forced abort of the RDBMS and/or executing recovery commands.</longdesc>
  <shortdesc lang="en">Enable or disable automatic startup recovery</shortdesc>
  <content type="boolean" default="false"/>
 </parameter>
 <parameter name="MONITOR_SERVICES" unique="0" required="0">
  <longdesc lang="en">Defines which services are monitored by the SAPDatabase resource agent, if STRICT_MONITORING is set to true. Service names must correspond with the output of the 'saphostctrl -function GetDatabaseStatus' command.</longdesc>
  <shortdesc lang="en">Database services to monitor</shortdesc>
  <content type="string" default="Instance|Database|Listener"/>
  <content type="string" default="Instance|Database|Listener"/>
 </parameter>
 <parameter name="DIR_BOOTSTRAP" unique="0" required="0">
  <longdesc lang="en">The full qualified path where to find the J2EE instance bootstrap directory. e.g. /usr/sap/P01/J00/j2ee/cluster/bootstrap</longdesc>
  <shortdesc lang="en">path to j2ee bootstrap directory</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="DIR_SECSTORE" unique="0" required="0">
  <longdesc lang="en">The full qualified path where to find the J2EE security store directory. e.g. /usr/sap/P01/SYS/global/security/lib/tools</longdesc>
  <shortdesc lang="en">path to j2ee secure store directory</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="DB_JARS" unique="0" required="0">
  <longdesc lang="en">The full qualified filename of the jdbc driver for the database connection test. It will be automaticaly read from the bootstrap.properties file in Java engine 6.40 and 7.00. For Java engine 7.10 and higher the parameter is mandatory.</longdesc>
  <shortdesc lang="en">file name of the jdbc driver</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="PRE_START_USEREXIT" unique="0" required="0">
  <longdesc lang="en">The full qualified path where to find a script or program which should be executed before this resource gets started.</longdesc>
  <shortdesc lang="en">path to a pre-start script</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="POST_START_USEREXIT" unique="0" required="0">
  <longdesc lang="en">The full qualified path where to find a script or program which should be executed after this resource got started.</longdesc>
  <shortdesc lang="en">path to a post-start script</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="PRE_STOP_USEREXIT" unique="0" required="0">
  <longdesc lang="en">The full qualified path where to find a script or program which should be executed before this resource gets stopped.</longdesc>
  <shortdesc lang="en">path to a pre-start script</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="POST_STOP_USEREXIT" unique="0" required="0">
  <longdesc lang="en">The full qualified path where to find a script or program which should be executed after this resource got stopped.</longdesc>
  <shortdesc lang="en">path to a post-start script</shortdesc>
  <content type="string" default="" />
 </parameter>
</parameters>

<actions>
<action name="start" timeout="1800" />
<action name="stop" timeout="1800" />
<action name="status" timeout="60" />
<action name="monitor" depth="0" timeout="60" interval="120" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
<action name="methods" timeout="5" />
</actions>
</resource-agent>
END
}

trap_handler() {
  rm -f $TEMPFILE
  exit $OCF_ERR_GENERIC
}


#
# listener_start: Start the given listener
#
listener_start() {
  local orasid="ora`echo $SID | tr '[:upper:]' '[:lower:]'`"
  local lrc=$OCF_SUCCESS
  local output
  output=`echo "lsnrctl start $NETSERVICENAME" | su - $orasid 2>&1`
  if [ $? -eq 0 ]
  then
    ocf_log info "Oracle Listener $NETSERVICENAME started: $output"
    lrc=$OCF_SUCCESS
  else
    ocf_log err "Oracle Listener $NETSERVICENAME start failed: $output"
    lrc=$OCF_ERR_GENERIC
  fi
  return $lrc
}

#
# listener_stop: Stop the given listener
#
listener_stop() {
  local orasid="ora`echo $SID | tr '[:upper:]' '[:lower:]'`"
  local lrc=$OCF_SUCCESS
  if
      listener_status
  then
      : listener is running, trying to stop it later...
  else
      return $OCF_SUCCESS
  fi
  local output
  output=`echo "lsnrctl stop $NETSERVICENAME" | su - $orasid 2>&1`
  if [ $? -eq 0 ]
  then
    ocf_log info "Oracle Listener $NETSERVICENAME stopped: $output"
  else
    ocf_log err "Oracle Listener $NETSERVICENAME stop failed: $output"
    lrc=$OCF_ERR_GENERIC
  fi
  return $lrc
}

#
# listener_status: is the given listener running?
#
listener_status() {
  local lrc=$OCF_SUCCESS
  local orasid="ora`echo $SID | tr '[:upper:]' '[:lower:]'`"
  # Note: ps cuts off it's output at column $COLUMNS, so "ps -ef" can not be used here
  # as the output might be to long.
  local cnt=`ps efo args --user $orasid | grep $NETSERVICENAME | grep -c tnslsnr`
  if [ $cnt -eq 1 ]
  then
    lrc=$OCF_SUCCESS
  else
    ocf_log info "listener process not running for $NETSERVICENAME for $SID"
    lrc=$OCF_ERR_GENERIC
  fi
  return $lrc
}

#
# x_server_start: Start the given x_server
#
x_server_start() {
  local rc=$OCF_SUCCESS
  local output
  output=`echo "x_server start" | su - $sidadm 2>&1`
  if [ $? -eq 0 ]
  then
    ocf_log info "MaxDB x_server start: $output"
    lrc=$OCF_SUCCESS
  else
    ocf_log err "MaxDB x_server start failed: $output"
    lrc=$OCF_ERR_GENERIC
  fi
  return $lrc
}

#
# x_server_stop: Stop the x_server
#
x_server_stop() {
  local lrc=$OCF_SUCCESS
  local output
  output=`echo "x_server stop" | su - $sidadm 2>&1`
  if [ $? -eq 0 ]
  then
    ocf_log info "MaxDB x_server stop: $output"
  else
    ocf_log err "MaxDB x_server stop failed: $output"
    lrc=$OCF_ERR_GENERIC
  fi
  return $lrc
}

#
# x_server_status: is the x_server running?
#
x_server_status() {
  local lrc=$OCF_SUCCESS
  local sdbuser=`grep "^SdbOwner" /etc/opt/sdb | awk -F'=' '{print $2}'`
  # Note: ps cuts off it's output at column $COLUMNS, so "ps -ef" can not be used here
  # as the output might be to long.
  local cnt=`ps efo args --user $sdbuser | grep -c vserver`
  if [ $cnt -ge 1 ]
  then
    lrc=$OCF_SUCCESS
  else
    ocf_log info "x_server process not running"
    lrc=$OCF_ERR_GENERIC
  fi
  return $lrc
}

#
# oracle_stop: Stop the Oracle database without any condition
#
oracle_stop() {
echo '#!/bin/sh
LOG=$HOME/stopdb.log
date > $LOG

if [ -x "${ORACLE_HOME}/bin/sqlplus" ]
then
    SRVMGRDBA_EXE="${ORACLE_HOME}/bin/sqlplus"
else
   echo "Can not find executable sqlplus" >> $LOG
   exit 1
fi

$SRVMGRDBA_EXE /NOLOG >> $LOG << !
connect / as sysdba
shutdown immediate
exit
!
rc=$?
cat $LOG
exit $rc' > $TEMPFILE

chmod 700 $TEMPFILE
chown $sidadm $TEMPFILE

su - $sidadm -c $TEMPFILE
retcode=$?
rm -f $TEMPFILE

if [ $retcode -eq 0 ]; then
  sapdatabase_status
  if [ $? -ne $OCF_NOT_RUNNING ]; then
    retcode=1
  fi
fi

return $retcode
}

#
# maxdb_stop: Stop the MaxDB database without any condition
#
maxdb_stop() {

# x_Server must be running to stop database
x_server_status
if [ $? -ne $OCF_SUCCESS ]; then x_server_start; fi

if [ $DBJ2EE_ONLY -eq 1 ]; then
   userkey=c_J2EE
else
   userkey=c
fi

echo "#!/bin/sh
LOG=\$HOME/stopdb.log
date > \$LOG
echo \"Stop database with xuserkey >$userkey<\" >> \$LOG
dbmcli -U ${userkey} db_offline >> \$LOG 2>&1
exit \$?" > $TEMPFILE

chmod 700 $TEMPFILE
chown $sidadm $TEMPFILE

su - $sidadm -c $TEMPFILE
retcode=$?
rm -f $TEMPFILE

if [ $retcode -eq 0 ]; then
  sapdatabase_status
  if [ $? -ne $OCF_NOT_RUNNING ]; then
    retcode=1
  fi
fi

return $retcode
}

#
# db6udb_stop: Stop the DB2/UDB database without any condition
#
db6udb_stop() {
echo '#!/bin/sh
LOG=$HOME/stopdb.log
date > $LOG
echo "Shut down the database" >> $LOG
$INSTHOME/sqllib/bin/db2 deactivate database $DB2DBDFT |tee -a $LOG  2>&1
$INSTHOME/sqllib/adm/db2stop force |tee -a $LOG  2>&1
exit $?' > $TEMPFILE

chmod 700 $TEMPFILE
chown $sidadm $TEMPFILE

su - $sidadm -c $TEMPFILE
retcode=$?
rm -f $TEMPFILE

if [ $retcode -eq 0 ]; then
  sapdatabase_status
  if [ $? -ne $OCF_NOT_RUNNING ]; then
    retcode=1
  fi
fi

return $retcode
}

#
# oracle_recover: try to clean up oracle after a crash
#
oracle_recover() {
echo '#!/bin/sh
LOG=$HOME/recover.log
date > $LOG
echo "Logfile written by heartbeat SAPDatabase resource agent" >> $LOG

if [ -x "${ORACLE_HOME}/bin/sqlplus" ]
then
    SRVMGRDBA_EXE="${ORACLE_HOME}/bin/sqlplus"
else
   echo "Can not find executable sqlplus" >> $LOG
   exit 1
fi

$SRVMGRDBA_EXE /NOLOG >> $LOG << !
connect / as sysdba
shutdown abort
startup mount
alter database end backup;
alter database open;
exit
!
rc=$?
cat $LOG
exit $rc' > $TEMPFILE

  chmod 700 $TEMPFILE
  chown $sidadm $TEMPFILE

  su - $sidadm -c $TEMPFILE
  retcode=$?
  rm -f $TEMPFILE

  return $retcode
}

#
# maxdb_recover: try to clean up MaxDB after a crash
#
maxdb_recover() {
  # x_Server must be running to stop database
  x_server_status
  if [ $? -ne $OCF_SUCCESS ]; then x_server_start; fi

  if [ $DBJ2EE_ONLY -eq 1 ]; then
     userkey=c_J2EE
  else
     userkey=c
  fi

echo "#!/bin/sh
LOG=\$HOME/recover.log
date > \$LOG
echo \"Logfile written by heartbeat SAPDatabase resource agent\" >> \$LOG
echo \"Cleanup database with xuserkey >$userkey<\" >> \$LOG
echo \"db_stop\" >> \$LOG 2>&1
dbmcli -U ${userkey} db_stop >> \$LOG 2>&1
echo \"db_clear\" >> \$LOG 2>&1
dbmcli -U ${userkey} db_clear >> \$LOG 2>&1
echo \"db_online\" >> \$LOG 2>&1
dbmcli -U ${userkey} db_online >> \$LOG 2>&1
rc=\$?
cat \$LOG
exit \$rc" > $TEMPFILE

  chmod 700 $TEMPFILE
  chown $sidadm $TEMPFILE

  su - $sidadm -c $TEMPFILE
  retcode=$?
  rm -f $TEMPFILE

  return $retcode
}

#
# db6udb_recover: try to recover DB/2 after a crash
#
db6udb_recover() {
  db2sid="db2`echo $SID | tr '[:upper:]' '[:lower:]'`"

echo '#!/bin/sh
LOG=$HOME/recover.log
date > $LOG
echo "Logfile written by heartbeat SAPDatabase resource agent" >> $LOG
$INSTHOME/sqllib/bin/db2_kill >> $LOG  2>&1
$INSTHOME/sqllib/adm/db2start >> $LOG  2>&1
$INSTHOME/sqllib/bin/db2 activate database $DB2DBDFT >> $LOG  2>&1
rc=$?
cat $LOG
exit $rc' > $TEMPFILE

  chmod 700 $TEMPFILE
  chown $db2sid $TEMPFILE

  su - $db2sid -c $TEMPFILE
  retcode=$?
  rm -f $TEMPFILE

  return $retcode
}

#
# methods: What methods/operations do we support?
#
sapdatabase_methods() {
  cat <<-!
	start
	stop
	status
	monitor
        recover
	validate-all
	methods
	meta-data
	usage
	!
}


#
# check_saphostexec : Before using saphostctrl we make sure that the saphostexec is running on the current node.
#
check_saphostexec() {
  restart=0
  runninginst=""
  chkrc=$OCF_SUCCESS

  output=`$SAPHOSTEXEC -status 2>&1`
  if [ $? -ne 0 ]
  then
    ocf_log warn "saphostexec is not running on node `hostname`, it will be started now"
    output=`$SAPHOSTEXEC -restart 2>&1`
    
    # now make sure the daemon has been started and is able to respond
    srvrc=1
    while [ $srvrc -ne 0 -a `pgrep -f "$SAPHOSTEXEC" | wc -l` -gt 0 ]
    do
      sleep 1
      output=`$SAPHOSTEXEC -status 2>&1`
      srvrc=$?
    done

    if [ $srvrc -eq 0 ]
    then
      ocf_log info "saphostexec on node `hostname` was restarted !"
      chkrc=$OCF_SUCCESS
    else
      ocf_log error "saphostexec on node `hostname` could not be started! - $output"
      chkrc=$OCF_ERR_GENERIC
    fi
  fi
  
  return $chkrc
}


#
# sapuserexit : Many SAP customers need some additional processes/tools to run their SAP systems.
#               This specialties do not allow a totally generic SAP cluster resource agent.
#               Someone should write a resource agent for each additional process you need, if it
#               is required to monitor that process within the cluster manager. To enable
#               you to extent this resource agent without developing a new one, this user exit
#               was introduced.
#
sapuserexit() {
  NAME="$1"
  VALUE="$2"

  if [ -n "$VALUE" ]
  then
    if have_binary "$VALUE"
    then
      ocf_log info "Calling userexit ${NAME} with customer script file ${VALUE}"
      "$VALUE" >/dev/null 2>&1
      ocf_log info "Exiting userexit ${NAME} with customer script file ${VALUE}, returncode: $?"
    else
      ocf_log warn "Attribute ${NAME} is set to ${VALUE}, but this file is not executable"
    fi
  fi
  return $OCF_SUCCESS
}


#
# sapdatabase_start : Start the SAP database
#
sapdatabase_start() {

  check_saphostexec
  rc=$?
  
  if [ $rc -eq $OCF_SUCCESS ]
  then
    sapuserexit PRE_START_USEREXIT "$OCF_RESKEY_PRE_START_USEREXIT"

    DBINST=""
    if [ -n "$OCF_RESKEY_DBINSTANCE" ]
    then
      DBINST="-dbinstance $OCF_RESKEY_DBINSTANCE "
    fi
    FORCE=""
    if ocf_is_true $OCF_RESKEY_AUTOMATIC_RECOVER
    then
      FORCE="-force"
    fi
    output=`$SAPHOSTCTRL -function StartDatabase -dbname $SID -dbtype $DBTYPE $DBINST $FORCE -service`

    sapdatabase_monitor 1
    rc=$?

    if [ $rc -eq 0 ]
    then
      ocf_log info "SAP database $SID started: $output"
      rc=$OCF_SUCCESS
    
      sapuserexit POST_START_USEREXIT "$OCF_RESKEY_POST_START_USEREXIT"
    else
      ocf_log err "SAP database $SID start failed: $output"
      rc=$OCF_ERR_GENERIC
    fi
  fi
  
  return $rc
}

#
# sapdatabase_stop: Stop the SAP database
#
sapdatabase_stop() {

  check_saphostexec
  rc=$?
  
  if [ $rc -eq $OCF_SUCCESS ]
  then
    sapuserexit PRE_STOP_USEREXIT "$OCF_RESKEY_PRE_STOP_USEREXIT"

    DBINST=""
    if [ -n "$OCF_RESKEY_DBINSTANCE" ]
    then
      DBINST="-dbinstance $OCF_RESKEY_DBINSTANCE "
    fi
    output=`$SAPHOSTCTRL -function StopDatabase -dbname $SID -dbtype $DBTYPE $DBINST -force -service`

    if [ $? -eq 0 ]
    then
      ocf_log info "SAP database $SID stopped: $output"
      rc=$OCF_SUCCESS
    else
      ocf_log err "SAP database $SID stop failed: $output"
      rc=$OCF_ERR_GENERIC
    fi
  fi

  sapuserexit POST_STOP_USEREXIT "$OCF_RESKEY_POST_STOP_USEREXIT"
  
  return $rc
}


#
# sapdatabase_monitor: Can the given database instance do anything useful?
#
sapdatabase_monitor() {
  strict=$1
  rc=$OCF_SUCCESS

  if ! ocf_is_true $strict
  then
    sapdatabase_status
    rc=$?
  else
    check_saphostexec
    rc=$?
  
    if [ $rc -eq $OCF_SUCCESS ]
    then
      count=0
      
      DBINST=""
      if [ -n "$OCF_RESKEY_DBINSTANCE" ]
      then
        DBINST="-dbinstance $OCF_RESKEY_DBINSTANCE "
      fi
      output=`$SAPHOSTCTRL -function GetDatabaseStatus -dbname $SID -dbtype $DBTYPE $DBINST`

      # we have to parse the output, because the returncode doesn't tell anything about the instance status
      for SERVICE in `echo "$output" | grep -i 'Component[ ]*Name *[:=] [A-Za-z][A-Za-z0-9_]* (' | sed 's/^.*Component[ ]*Name *[:=] *\([A-Za-z][A-Za-z0-9_]*\).*$/\1/i'`
      do 
        COLOR=`echo "$output" | grep -i "Component[ ]*Name *[:=] *$SERVICE (" | sed 's/^.*Status *[:=] *\([A-Za-z][A-Za-z0-9_]*\).*$/\1/i'`
        STATE=0

        case $COLOR in
          Running)       STATE=$OCF_SUCCESS;;
          *)             STATE=$OCF_NOT_RUNNING;;
        esac 

        SEARCH=`echo "$OCF_RESKEY_MONITOR_SERVICES" | sed 's/\+/\\\+/g' | sed 's/\./\\\./g'`
        if [ `echo "$SERVICE" | egrep -c "$SEARCH"` -eq 1 ]
        then
            if [ $STATE -eq $OCF_NOT_RUNNING ]
            then
              ocf_log err "SAP database service $SERVICE is not running with status $COLOR !"
              rc=$STATE
            fi
            count=1
        fi
      done

      if [ $count -eq 0 -a $rc -eq $OCF_SUCCESS ]
      then
        ocf_log err "The resource does not run any services which this RA could monitor!"
        rc=$OCF_ERR_ARGS
      fi
      
      if [ $rc -ne $OCF_SUCCESS ]
      then
        ocf_log err "The SAP database $SID ist not running: $output"
      fi
    fi
  fi
  return $rc
}


#
# sapdatabase_status: Are there any database processes on this host ?
#
sapdatabase_status() {
  case $DBTYPE in
    ADA) SEARCH="$SID/db/pgm/kernel"
         SUSER=`grep "^SdbOwner" /etc/opt/sdb | awk -F'=' '{print $2}'`
         SNUM=2
         ;;
    ORA) SEARCH="ora_[a-z][a-z][a-z][a-z]_"
         SUSER="ora`echo $SID | tr '[:upper:]' '[:lower:]'`"
         SNUM=4
         ;;
    DB6) SEARCH="db2[a-z][a-z][a-z]"
         SUSER="db2`echo $SID | tr '[:upper:]' '[:lower:]'`"
         SNUM=2
         ;;
  esac

  # Note: ps cuts off it's output at column $COLUMNS, so "ps -ef" can not be used here
  # as the output might be to long.
  cnt=`ps efo args --user $SUSER 2> /dev/null | grep -c "$SEARCH"`
  [ $cnt -ge $SNUM ] && return $OCF_SUCCESS
  return $OCF_NOT_RUNNING
}


#
# sapdatabase_recover:
#
sapdatabase_recover() {
  OCF_RESKEY_AUTOMATIC_RECOVER=1
  sapdatabase_stop
  sapdatabase_start
}


#
# sapdatabase_validate: Check the symantic of the input parameters 
#
sapdatabase_validate() {
  rc=$OCF_SUCCESS
  if [ `echo "$SID" | grep -c '^[A-Z][A-Z0-9][A-Z0-9]$'` -ne 1 ]
  then
    ocf_log err "Parsing parameter SID: '$SID' is not a valid system ID!"
    rc=$OCF_ERR_ARGS
  fi

  case "$DBTYPE" in
   ORA|ADA|DB6) ;;
   *) ocf_log err "Parsing parameter DBTYPE: '$DBTYPE' is not a supported database type!"
      rc=$OCF_ERR_ARGS ;;
  esac

  return $rc
}


#
#	'main' starts here...
#

if
  ( [ $# -ne 1 ] )
then
  usage
  exit $OCF_ERR_ARGS
fi

# Set a tempfile and make sure to clean it up again
TEMPFILE="/tmp/SAPDatabase.$$.tmp"
trap trap_handler INT TERM

# These operations don't require OCF instance parameters to be set
case "$1" in
  meta-data)	meta_data
		exit $OCF_SUCCESS;;

  usage) 	usage
		exit $OCF_SUCCESS;;

  methods)	sapdatabase_methods
		exit $?;;

  *);;
esac

if  ! ocf_is_root 
then
  ocf_log err "$0 must be run as root"
  exit $OCF_ERR_PERM
fi

# mandatory parameter check
if  [ -z "$OCF_RESKEY_SID" ]; then
  ocf_log err "Please set OCF_RESKEY_SID to the SAP system id!"
  exit $OCF_ERR_ARGS
fi
SID=`echo "$OCF_RESKEY_SID"`

if [ -z "$OCF_RESKEY_DBTYPE" ]; then
  ocf_log err "Please set OCF_RESKEY_DBTYPE to the database vendor specific tag (ADA,DB6,ORA)!"
  exit $OCF_ERR_ARGS
fi
DBTYPE=`echo "$OCF_RESKEY_DBTYPE" | tr '[:lower:]' '[:upper:]'`

# optional OCF parameters
OCF_RESKEY_DIR_EXECUTABLE_default="/usr/sap/hostctrl/exe"
: ${OCF_RESKEY_DIR_EXECUTABLE=${OCF_RESKEY_DIR_EXECUTABLE_default}}
SAPHOSTCTRL="${OCF_RESKEY_DIR_EXECUTABLE}/saphostctrl"
SAPHOSTEXEC="${OCF_RESKEY_DIR_EXECUTABLE}/saphostexec"
check_binary $SAPHOSTCTRL
check_binary $SAPHOSTEXEC

OCF_RESKEY_AUTOMATIC_RECOVER_default=0
: ${OCF_RESKEY_AUTOMATIC_RECOVER=${OCF_RESKEY_AUTOMATIC_RECOVER_default}}

if [ -z "$OCF_RESKEY_MONITOR_SERVICES" ]
then
  case $DBTYPE in
    ORA) export OCF_RESKEY_MONITOR_SERVICES="Instance|Database|Listener"
         ;;
    ADA) export OCF_RESKEY_MONITOR_SERVICES="Database"
         ;;
    DB6) db2sid="db2`echo $SID | tr '[:upper:]' '[:lower:]'`"
         export OCF_RESKEY_MONITOR_SERVICES="${SID}|${db2sid}"
         ;;
    SYB) export OCF_RESKEY_MONITOR_SERVICES="Server|Database"
         ;;
    HDB) export OCF_RESKEY_MONITOR_SERVICES="hdbindexserver"
         ;;
  esac
fi

# we always want to fall to the faster status method in case of a probe by the cluster  
ACTION=$1
if ocf_is_probe 
then
  ACTION=status
fi

# What kind of method was invoked?
case "$ACTION" in

  start|stop|status|recover)   sapdatabase_$ACTION
		               exit $?;;
  monitor)                     sapdatabase_monitor $OCF_RESKEY_STRICT_MONITORING
		               exit $?;;
  validate-all)                sapdatabase_validate
		               exit $?;;
  *)		               sapdatabase_methods
		               exit $OCF_ERR_UNIMPLEMENTED;;
esac
